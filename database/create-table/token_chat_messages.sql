CREATE TABLE IF NOT EXISTS "public"."token_chat_messages" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "token_address" "text" NOT NULL,
    "author" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "message_type" smallint NOT NULL,
    "message" "text",
    "rich" "jsonb",
    "translated" "jsonb",
    "author_name" "text",
    "author_avatar_url" "text",
    "chain" "text" DEFAULT 'base'::"text" NOT NULL
);

ALTER TABLE "public"."token_chat_messages" OWNER TO "postgres";

ALTER TABLE "public"."token_chat_messages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."chat_messages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."token_chat_messages"
    ADD CONSTRAINT "chat_messages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."token_chat_messages"
    ADD CONSTRAINT "token_chat_messages_author_fkey" FOREIGN KEY ("author") REFERENCES "auth"."users"("id");

ALTER TABLE "public"."token_chat_messages" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "view only holder or owner" ON "public"."token_chat_messages" FOR SELECT TO "authenticated" USING (((( SELECT "tokens"."owner"
   FROM "public"."tokens"
  WHERE (("tokens"."chain" = "token_chat_messages"."chain") AND ("tokens"."token_address" = "token_chat_messages"."token_address"))) = ( SELECT "users_public"."wallet_address"
   FROM "public"."users_public"
  WHERE ("users_public"."user_id" = "auth"."uid"()))) OR (( SELECT "tokens"."view_token_required"
   FROM "public"."tokens"
  WHERE (("tokens"."chain" = "token_chat_messages"."chain") AND ("tokens"."token_address" = "token_chat_messages"."token_address"))) <= ( SELECT "token_holders"."last_fetched_balance"
   FROM "public"."token_holders"
  WHERE (("token_holders"."chain" = "token_chat_messages"."chain") AND ("token_holders"."token_address" = "token_chat_messages"."token_address") AND ("token_holders"."wallet_address" = ( SELECT "users_public"."wallet_address"
           FROM "public"."users_public"
          WHERE ("users_public"."user_id" = "auth"."uid"()))))))));

CREATE POLICY "write only holder or owner" ON "public"."token_chat_messages" FOR INSERT TO "authenticated" WITH CHECK ((((("message" <> ''::"text") AND ("length"("message") < 1000)) OR ("rich" IS NOT NULL)) AND ("author" = "auth"."uid"()) AND ((( SELECT "tokens"."owner"
   FROM "public"."tokens"
  WHERE (("tokens"."chain" = "token_chat_messages"."chain") AND ("tokens"."token_address" = "token_chat_messages"."token_address"))) = ( SELECT "users_public"."wallet_address"
   FROM "public"."users_public"
  WHERE ("users_public"."user_id" = "auth"."uid"()))) OR (( SELECT "tokens"."view_token_required"
   FROM "public"."tokens"
  WHERE (("tokens"."chain" = "token_chat_messages"."chain") AND ("tokens"."token_address" = "token_chat_messages"."token_address"))) <= ( SELECT "token_holders"."last_fetched_balance"
   FROM "public"."token_holders"
  WHERE (("token_holders"."chain" = "token_chat_messages"."chain") AND ("token_holders"."token_address" = "token_chat_messages"."token_address") AND ("token_holders"."wallet_address" = ( SELECT "users_public"."wallet_address"
           FROM "public"."users_public"
          WHERE ("users_public"."user_id" = "auth"."uid"())))))))));

GRANT ALL ON TABLE "public"."token_chat_messages" TO "anon";
GRANT ALL ON TABLE "public"."token_chat_messages" TO "authenticated";
GRANT ALL ON TABLE "public"."token_chat_messages" TO "service_role";
