/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "https://esm.sh/ethers@6.7.0";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.ts";

export interface PalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyToken"
      | "createToken"
      | "getBuyPrice"
      | "getBuyPriceAfterFee"
      | "getPrice"
      | "getSellPrice"
      | "getSellPriceAfterFee"
      | "initialize"
      | "isPalToken"
      | "owner"
      | "protocolFeeDestination"
      | "protocolFeePercent"
      | "renounceOwnership"
      | "sellToken"
      | "setProtocolFeeDestination"
      | "setProtocolFeePercent"
      | "setTokenOwnerFeePercent"
      | "tokenOwnerFeePercent"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferred"
      | "TokenCreated"
      | "Trade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPriceAfterFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPriceAfterFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPalToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeDestination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeDestination",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenOwnerFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPalToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenOwnerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenAddress: AddressLike,
    name: string,
    symbol: string
  ];
  export type OutputTuple = [
    owner: string,
    tokenAddress: string,
    name: string,
    symbol: string
  ];
  export interface OutputObject {
    owner: string;
    tokenAddress: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    trader: AddressLike,
    tokenAddress: AddressLike,
    isBuy: boolean,
    amount: BigNumberish,
    price: BigNumberish,
    protocolFee: BigNumberish,
    tokenOwnerFee: BigNumberish,
    supply: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    tokenAddress: string,
    isBuy: boolean,
    amount: bigint,
    price: bigint,
    protocolFee: bigint,
    tokenOwnerFee: bigint,
    supply: bigint
  ];
  export interface OutputObject {
    trader: string;
    tokenAddress: string;
    isBuy: boolean;
    amount: bigint;
    price: bigint;
    protocolFee: bigint;
    tokenOwnerFee: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Pal extends BaseContract {
  connect(runner?: ContractRunner | null): Pal;
  waitForDeployment(): Promise<this>;

  interface: PalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyToken: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  createToken: TypedContractMethod<
    [name: string, symbol: string],
    [string],
    "nonpayable"
  >;

  getBuyPrice: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getBuyPriceAfterFee: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPrice: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPriceAfterFee: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _protocolFeeDestination: AddressLike,
      _protocolFeePercent: BigNumberish,
      _tokenOwnerFeePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isPalToken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolFeeDestination: TypedContractMethod<[], [string], "view">;

  protocolFeePercent: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellToken: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFeeDestination: TypedContractMethod<
    [_feeDestination: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenOwnerFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenOwnerFeePercent: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyToken"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [name: string, symbol: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBuyPrice"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBuyPriceAfterFee"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPrice"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPriceAfterFee"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _protocolFeeDestination: AddressLike,
      _protocolFeePercent: BigNumberish,
      _tokenOwnerFeePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPalToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeeDestination"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellToken"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolFeeDestination"
  ): TypedContractMethod<[_feeDestination: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenOwnerFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenOwnerFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenCreated(address,address,string,string)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "Trade(address,address,bool,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
  };
}
